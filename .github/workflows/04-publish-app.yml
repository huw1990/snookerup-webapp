# This workflow builds the Docker image for the app and then deploys the application.
name: 04 - Publish App

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

on:
# Disable running this workflow when a new commit is made to the application
# (since we've recently manually deleted all the CloudFormation stacks, so this will fail anyway)
#  push:
#    paths:
#      - 'application/**'
#      - 'cdk/**/*Service*'
#      - 'cdk/pom.xml'
#      - '.github/workflows/04-publish-app.yml'
  workflow_dispatch:
jobs:
  build-and-publish:
    runs-on: ubuntu-22.04
    name: Build and publish Todo App
    outputs:
      dockerImageTag: ${{ steps.dockerImageTag.outputs.tag }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'maven'

      - name: Build application
        working-directory: application
        run: ./mvnw clean verify

      - name: Create Docker image tag
        id: dockerImageTag
        run: echo "tag=$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Publish Docker image to ECR registry
        if: github.ref == 'refs/heads/main'
        env:
          DOCKER_IMAGE_TAG: ${{ steps.dockerImageTag.outputs.tag }}
        working-directory: application
        run: |
          docker build -t snookerup-webapp .
          docker tag snookerup-webapp ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/snookerup-webapp:${DOCKER_IMAGE_TAG}
          docker tag snookerup-webapp ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/snookerup-webapp:latest
          aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/snookerup-webapp:${DOCKER_IMAGE_TAG}
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/snookerup-webapp:latest

  deploy:
    runs-on: ubuntu-22.04
    name: Deploy App
    needs: build-and-publish
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    concurrency: snookerup-application-deployment
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'maven'

      - name: NPM install
        working-directory: cdk
        run: npm install

      - name: Deploy service stack
        working-directory: cdk
        run: npm run service:deploy -- -c dockerImageTag=${{ needs.build-and-publish.outputs.dockerImageTag }}

      # Each Service stack updates creates a new parameter stack that CloudFormation does not clean up for us.
      # This step deletes all "*Service-Parameters*" stacks except the latest one to keep the house clean.
      - name: Clean up old parameter stacks
        working-directory: cdk
        run: |
          aws cloudformation describe-stacks --region eu-central-1 --query "Stacks[].StackName" --output text | sed -e "s/\s\+/\n/g" | grep -e "staging-snookerup-webapp-Service-Parameters" | sort -r | tail -n+2 > stacks_to_be_deleted.txt
          for stack in $(cat stacks_to_be_deleted.txt); do aws cloudformation delete-stack --stack-name $stack --region eu-central-1;  done
